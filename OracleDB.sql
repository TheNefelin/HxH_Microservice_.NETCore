-- Tables -------------------------------------------------------
-- --------------------------------------------------------------

CREATE TABLE NEN_TYPE (
    ID_NEN_TYPE NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(50) NOT NULL,
    DESCRIPTION VARCHAR2(255)
);

CREATE TABLE HUNTER (
    ID_HUNTER NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    AGE NUMBER,
    ORIGIN VARCHAR2(100)
);

CREATE TABLE HUNTER_NEN (
    ID_HUNTER NUMBER NOT NULL,
    ID_NEN_TYPE NUMBER NOT NULL,
    NEN_LEVEL FLOAT,
    PRIMARY KEY (ID_HUNTER, ID_NEN_TYPE),
    CONSTRAINT FK_HUNTER FOREIGN KEY (ID_HUNTER) REFERENCES HUNTER(ID_HUNTER),
    CONSTRAINT FK_NEN_TYPE FOREIGN KEY (ID_NEN_TYPE) REFERENCES NEN_TYPE(ID_NEN_TYPE)
);

-- Data ---------------------------------------------------------
-- --------------------------------------------------------------

INSERT INTO NEN_TYPE (NAME, DESCRIPTION) VALUES ('Intensificación', 'Mejora sus habilidades físicas');
INSERT INTO NEN_TYPE (NAME, DESCRIPTION) VALUES ('Transformación', 'Cambia propiedades de su aura');
INSERT INTO NEN_TYPE (NAME, DESCRIPTION) VALUES ('Materialización', 'Crea objetos físicos');
INSERT INTO NEN_TYPE (NAME, DESCRIPTION) VALUES ('Especialización', 'Habilidades únicas fuera de las demás categorías');
INSERT INTO NEN_TYPE (NAME, DESCRIPTION) VALUES ('Emisión', 'Proyecta el aura lejos del cuerpo');
INSERT INTO NEN_TYPE (NAME, DESCRIPTION) VALUES ('Manipulación', 'Controla objetos o seres');

INSERT INTO HUNTER (NAME, AGE, ORIGIN) VALUES ('Gon Freecss', 14, 'Isla Ballena');
INSERT INTO HUNTER (NAME, AGE, ORIGIN) VALUES ('Killua Zoldyck', 14, 'Montaña Kukuru');
INSERT INTO HUNTER (NAME, AGE, ORIGIN) VALUES ('Kurapika Kurta', 17, 'Aldea Kurta');
INSERT INTO HUNTER (NAME, AGE, ORIGIN) VALUES ('Leorio Paradinight', 19, 'Ciudad desconocida');

INSERT INTO HUNTER_NEN (ID_HUNTER, ID_NEN_TYPE, NEN_LEVEL) VALUES (1, 1, 90.0);
INSERT INTO HUNTER_NEN (ID_HUNTER, ID_NEN_TYPE, NEN_LEVEL) VALUES (2, 2, 80.5);
INSERT INTO HUNTER_NEN (ID_HUNTER, ID_NEN_TYPE, NEN_LEVEL) VALUES (3, 4, 95.0);
INSERT INTO HUNTER_NEN (ID_HUNTER, ID_NEN_TYPE, NEN_LEVEL) VALUES (4, 5, 65.0);

-- Types --------------------------------------------------------
-- --------------------------------------------------------------

CREATE OR REPLACE TYPE ResultObj AS OBJECT (
    IsSuccess   NUMBER(1),
    Message     VARCHAR2(255),
    Data        VARCHAR2(255)
);

-- Stored Procedure ---------------------------------------------
-- --------------------------------------------------------------

CREATE OR REPLACE PROCEDURE InsertHunterNen(
    p_Id_Hunter IN hunter.id_hunter%TYPE,
    p_Id_NenType IN NUMBER,
    p_NenLevel IN NUMBER,
    p_Result OUT ResultObj
) AS
    v_count NUMBER;
BEGIN
    -- Validate if Hunter exists
    SELECT COUNT(1) INTO v_count FROM Hunter WHERE Id_Hunter = p_Id_Hunter;
    IF v_count = 0 THEN
        p_Result := ResultObj(0, 'Hunter not found', NULL);
        RETURN;
    END IF;
        
    -- Validate if NenType exists
    SELECT COUNT(1) INTO v_count FROM Nen_Type WHERE Id_Nen_Type = p_Id_NenType;
    IF v_count = 0 THEN
        p_Result := ResultObj(0, 'NenType not found', NULL);
        RETURN;
    END IF;

    -- Check if HunterNen already exists
    SELECT COUNT(1) INTO v_count FROM Hunter_Nen WHERE Id_Hunter = p_Id_Hunter AND Id_Nen_Type = p_Id_NenType;
    IF v_count > 0 THEN
        p_Result := ResultObj(0, 'HunterNen already exists', NULL);
        RETURN;
    END IF;    
    
    -- Insert into Hunter_Nen
    INSERT INTO Hunter_Nen (Id_Hunter, Id_Nen_Type, Nen_Level)
    VALUES (p_Id_Hunter, p_Id_NenType, p_NenLevel);
    
    -- If the insert was successful, assign a success message
    p_Result := ResultObj(1, 'Inserted successfully', NULL);  -- ResultObj: 1 for success, message, and null data
EXCEPTION
    WHEN OTHERS THEN
        p_Result := ResultObj(0, 'Failed to insert HunterNen', NULL);  -- Handle exception with failure message
        -- Optionally, you can log the error using DBMS_OUTPUT or other logging mechanisms
        ROLLBACK;
END InsertHunterNen;

-- Query --------------------------------------------------------
-- --------------------------------------------------------------

DECLARE
    v_result ResultObj;  -- Declare the ResultObj variable to hold the result
BEGIN
    -- Call the InsertHunterNen procedure
    InsertHunterNen(
        p_Id_Hunter => 1,
        p_Id_NenType => 1,
        p_NenLevel => 50,
        p_Result => v_result
    );

    -- Output the result
    DBMS_OUTPUT.PUT_LINE('Success: ' || v_result.IsSuccess);
    DBMS_OUTPUT.PUT_LINE('Message: ' || v_result.Message);
END;

SELECT
    a.id_hunter,
    a.name,
    a.age,
    a.origin,
    b.percentage,
    c.name
FROM hunter a 
    INNER JOIN hunter_nen b ON a.id_hunter = b.id_hunter
    INNER JOIN nen_type c ON c.id_nen_type = b.id_nen_type;

SELECT * FROM HUNTER_NEN;
SELECT * FROM HUNTER;
SELECT * FROM NEN_TYPE;

DROP TABLE HUNTER_NEN;
DROP TABLE HUNTER;
DROP TABLE NEN_TYPE;

-- --------------------------------------------------------------
-- --------------------------------------------------------------